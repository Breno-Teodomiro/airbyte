version: 6.7.0

type: DeclarativeSource

check:
  stream_names: []
  type: CheckStream

dynamic_streams:
  - type: DynamicDeclarativeStream
    stream_template:
      type: DeclarativeStream
      name: ""
      primary_key: []
      retriever:
        type: SimpleRetriever
        partition_router:
          type: CustomPartitionRouter
          $parameters:
            row_count: 0
            batch_size: 0
          class_name: source_google_sheets.components.RangePartitionRouter
          description: Partition router that generates ranges for batch fetching.
        paginator:
          type: NoPagination
        record_selector:
          extractor:
            type: CustomRecordExtractor
            class_name: source_google_sheets.components.FieldMatchingExtractor
            description: Extract record list of values (rows) and matches such values to correct schema property to generate individual records.
            field_path:
              - valueRanges
              - "*"
            $parameters:
              # We use these parameters to work with the response in the record selector
              sheet_data_values_path:
                ["sheets", "*", "data", "*", "rowData", "*", "values", "*"]
              fields_to_match_key: "formattedValue"
              values_to_match_key: "values"
              fields_to_match_origin:
                $ref: "#/definitions/base_requester"
                $parameters:
                  # Sheet id is provided by components_resolver
                  sheet_id: ""
                  name: "headers_requester"
                http_method: GET
                use_cache: True
                path: '{% if config["spreadsheet_id"] | regex_search("^(https://.*)") %}{{ config["spreadsheet_id"] | regex_search("/([-\\w]{20,})([/]?)") }}{% else %}{{ config["spreadsheet_id"] }}{% endif %}?includeGridData=true&ranges={{parameters["sheet_id"]}}!1:1&alt=json'

          type: RecordSelector
          $parameters:
            name: ""
        requester:
          $ref: "#/definitions/base_requester"
          $parameters:
            sheet_id: ""
            name: ""
          http_method: GET
          path: '{% if config["spreadsheet_id"] | regex_search("^(https://.*)") %}{{ config["spreadsheet_id"] | regex_search("/([-\\w]{20,})([/]?)") }}{% else %}{{ config["spreadsheet_id"] }}{% endif %}/values:batchGet?ranges={{parameters["sheet_id"]}}!{{stream_partition.start_range}}:{{stream_partition.end_range}}&majorDimension=ROWS&alt=json'
      schema_loader:
        type: DynamicSchemaLoader
        retriever:
          type: SimpleRetriever
          paginator:
            type: NoPagination
          record_selector:
            extractor:
              field_path:
                - sheets
                - "*"
                - data
                - "*"
                - rowData
                - "*"
              type: DpathExtractor
            type: RecordSelector
          requester:
            $ref: "#/definitions/base_requester"
            $parameters:
              sheet_id: ""
            http_method: GET
            path: '{% if config["spreadsheet_id"] | regex_search("^(https://.*)") %}{{ config["spreadsheet_id"] | regex_search("/([-\\w]{20,})([/]?)") }}{% else %}{{ config["spreadsheet_id"] }}{% endif %}?includeGridData=true&ranges={{parameters["sheet_id"]}}!1:1&alt=json'
        schema_type_identifier:
          key_pointer:
            - formattedValue
          schema_pointer:
            - values
    components_resolver:
      type: HttpComponentsResolver
      description: We use spreadsheet information (sheets) to create streams.
      retriever:
        type: SimpleRetriever
        paginator:
          type: NoPagination
        record_selector:
          extractor:
            field_path:
              - sheets
              - "*"
              - properties
            type: DpathExtractor
          type: RecordSelector
        requester:
          $ref: "#/definitions/base_requester"
          description: spreadsheet_id can be either the full url to spreadsheet or the spreadsheet id.
          http_method: GET
          path: '{% if config["spreadsheet_id"] | regex_search("^(https://.*)") %}{{ config["spreadsheet_id"] | regex_search("/([-\\w]{20,})([/]?)") }}{% else %}{{ config["spreadsheet_id"] }}{% endif %}?includeGridData=false&alt=json'
      components_mapping:
        - field_path:
            - name
          type: ComponentMappingDefinition
          value: "{{components_values['title']}}"
          description: name for dynamic stream.
        - field_path:
            - schema_loader
            - retriever
            - requester
            - $parameters
            - sheet_id
          type: ComponentMappingDefinition
          value: "{{components_values['title']}}"
          description: sheet_id for dynamic schema loader requester.
        - field_path:
            - retriever
            - requester
            - $parameters
            - sheet_id
          type: ComponentMappingDefinition
          value: "{{components_values['title']}}"
          description: sheet_id for dynamic stream retriever requester.
        - field_path:
            - retriever
            - record_selector
            - extractor
            - $parameters
            - fields_to_match_origin
            - $parameters
            - sheet_id
          type: ComponentMappingDefinition
          value: "{{components_values['title']}}"
          description: sheet_id for for extractor requester that will get correct order of record values.
        - field_path:
            - retriever
            - partition_router
            - $parameters
            - row_count
          type: ComponentMappingDefinition
          value: "{{components_values['gridProperties']['rowCount']}}"
          description: rows count for dynamic stream partition router (slicer).
        - field_path:
            - retriever
            - partition_router
            - $parameters
            - batch_size
          type: ComponentMappingDefinition
          value: "{{config['batch_size']}}"
          description: rows count for dynamic stream partition router (slicer).

definitions:
  base_requester:
    type: HttpRequester
    url_base: https://sheets.googleapis.com/v4/spreadsheets/
    authenticator: "#/definitions/authenticator"
  bearer_authenticator:
    type: BearerAuthenticator
    api_token: "{{ config['credentials']['access_token'] }}"
  oauth_authenticator:
    type: OAuthAuthenticator
    refresh_request_body: {}
    token_refresh_endpoint: https://www.googleapis.com/oauth2/v4/token
    grant_type: refresh_token
    client_id: '{{ config["credentials"]["client_id"] }}'
    client_secret: '{{ config["credentials"]["client_secret"] }}'
    refresh_token: '{{ config["credentials"]["refresh_token"] }}'
  authenticator:
    type: SelectiveAuthenticator
    authenticator_selection_path: ["credentials", "auth_type"]
    authenticators:
      Client: "#/definitions/oauth_authenticator"
      Service: "#/definitions/bearer_authenticator"
